# Generated by Buildalon. Generate another Unity build workflow at buildalon.com
# Feel free to edit this workflow to update build targets or add additional steps.
# Check out the Buildalon open source actions at https://github.com/marketplace?query=buildalon

name: Buildalon Unity Build
on:
  push:
    branches:
      - 'master'
      - 'develop'
  pull_request:
    branches:
      - 'develop'
      - 'master'
  workflow_dispatch:
    inputs:
      clean:
        description: 'Cleans the library folder and deletes cached items'
        required: false
        default: false
        type: 'boolean'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ ( github.event_name == 'pull_request' || github.event.action == 'synchronize' ) }}
jobs:
  build:
    env:
      UNITY_PROJECT_PATH: ''
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [buildalon-windows, buildalon-macos]
        include:
          - os: buildalon-windows
            build-target: Android
            build-args: ''
          - os: buildalon-macos
            build-target: iOS
            build-args: ' -enableAppleAutomaticSigning'
    steps:
      - uses: actions/checkout@v4
        with:
          clean: ${{ github.event.inputs.clean == 'true' }}
          lfs: true
          submodules: 'recursive'
      - uses: buildalon/unity-setup@v1
        with:
          build-targets: '${{ matrix.build-target }}'
      - uses: buildalon/activate-unity-license@v1
        with:
          license: 'Personal'
          username: '${{ secrets.UNITY_USERNAME }}'
          password: '${{ secrets.UNITY_PASSWORD }}'
      - name: Add Build Pipeline Package
        working-directory: ${{ env.UNITY_PROJECT_PATH }}
        run: |
          npm install -g openupm-cli
          openupm add com.virtualmaker.buildalon
      - uses: buildalon/unity-action@v1
        name: Project Validation
        with:
          log-name: 'project-validation'
          build-target: '${{ matrix.build-target }}'
          args: '-quit -batchmode -executeMethod Buildalon.Editor.BuildPipeline.UnityPlayerBuildTools.ValidateProject'
      - uses: buildalon/unity-action@v1
        name: '${{ matrix.build-target }}-Build'
        with:
          log-name: '${{ matrix.build-target }}-Build'
          build-target: '${{ matrix.build-target }}'
          args: '-quit -batchmode -executeMethod Buildalon.Editor.BuildPipeline.UnityPlayerBuildTools.StartCommandLineBuild${{ matrix.build-args }}'
      - uses: buildalon/unity-xcode-builder@v1
        id: xcode-build
        if: ${{ matrix.build-target == 'iOS' }}
        with:
          project-path: ${{ env.UNITY_PROJECT_PATH }}/Builds/${{ matrix.build-target }}/**/*.xcodeproj
          app-store-connect-key: ${{ secrets.APP_STORE_CONNECT_KEY }}
          app-store-connect-key-id: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          app-store-connect-issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          team-id: ${{ secrets.APPLE_TEAM_ID }}
      - uses: actions/upload-artifact@v4
        id: upload-artifact
        name: 'Upload ${{ matrix.build-target }} Artifacts'
        if: success() || failure()
        with:
          compression-level: 0
          retention-days: 1
          name: '${{ github.run_number }}.${{ github.run_attempt }}-${{ matrix.os }}-${{ matrix.build-target }}-Artifacts'
          path: |
            ${{ github.workspace }}/**/*.log
            ${{ steps.xcode-build.outputs.executable }}
            ${{ env.UNITY_PROJECT_PATH }}/Builds/Android/**/*.obb
            ${{ env.UNITY_PROJECT_PATH }}/Builds/Android/**/*.apk
            ${{ env.UNITY_PROJECT_PATH }}/Builds/Android/**/*.abb
      - name: Clean Artifacts
        if: always()
        shell: pwsh
        run: |
          # Clean Logs
          Get-ChildItem -Path "${{ env.UNITY_PROJECT_PATH }}" -File -Filter "*.log" -Recurse | Remove-Item -Force

          $artifacts = "${{ env.UNITY_PROJECT_PATH }}/Builds"
          Write-Host "::debug::Build artifacts path: $artifacts"

          if (Test-Path -Path $artifacts) {
            try {
              Remove-Item $artifacts -Recurse -Force
            } catch {
              Write-Warning "Failed to delete artifacts folder file: $_"
            }
          } else {
            Write-Host "::debug::Artifacts folder not found."
          }
